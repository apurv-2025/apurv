import React, { useState, useEffect, createContext, useContext } from 'react';
import { 
  Users, Bot, Settings, Upload, MessageSquare, Shield, BarChart3, Plus, Edit, 
  Trash2, Save, TestTube, BookOpen, Send, LogOut, User, Building, Mail, Lock, 
  Eye, EyeOff, Bell, Home, Calendar, FileText, Activity, TrendingUp, CheckCircle,
  AlertTriangle, Download, Search, Filter, ExternalLink, Clock, Star, Zap
} from 'lucide-react';

// Complete Service Worker Registration
const registerServiceWorker = () => {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registered: ', registration);
        })
        .catch((registrationError) => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }
};

// PWA Install Prompt Component
const PWAInstallPrompt = () => {
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);

  useEffect(() => {
    const handler = (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowInstallPrompt(true);
    };

    window.addEventListener('beforeinstallprompt', handler);

    return () => {
      window.removeEventListener('beforeinstallprompt', handler);
    };
  }, []);

  const handleInstall = async () => {
    if (!deferredPrompt) return;

    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      setDeferredPrompt(null);
      setShowInstallPrompt(false);
    }
  };

  if (!showInstallPrompt) return null;

  return (
    <div className="fixed bottom-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm">
      <div className="flex items-center space-x-3 mb-3">
        <Zap className="w-6 h-6" />
        <div>
          <h3 className="font-semibold">Install AI Agent Builder</h3>
          <p className="text-sm opacity-90">Get the app for faster access and offline features</p>
        </div>
      </div>
      <div className="flex space-x-2">
        <button
          onClick={handleInstall}
          className="bg-white text-blue-600 px-4 py-2 rounded text-sm font-medium hover:bg-gray-100 transition"
        >
          Install
        </button>
        <button
          onClick={() => setShowInstallPrompt(false)}
          className="text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition"
        >
          Later
        </button>
      </div>
    </div>
  );
};

// Enhanced Notification System
const NotificationCenter = () => {
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const { user } = useAuth();

  useEffect(() => {
    // Mock notifications - replace with real API
    setNotifications([
      {
        id: 1,
        title: 'Agent Updated',
        message: 'Your billing agent has been successfully updated',
        type: 'success',
        timestamp: new Date(),
        read: false
      },
      {
        id: 2,
        title: 'New Integration Available',
        message: 'Epic EHR integration is now available for your practice',
        type: 'info',
        timestamp: new Date(Date.now() - 3600000),
        read: false
      },
      {
        id: 3,
        title: 'Security Alert',
        message: 'Unusual login detected from new device',
        type: 'warning',
        timestamp: new Date(Date.now() - 7200000),
        read: true
      }
    ]);
  }, []);

  const unreadCount = notifications.filter(n => !n.read).length;

  const markAsRead = (id) => {
    setNotifications(prev => 
      prev.map(n => n.id === id ? { ...n, read: true } : n)
    );
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'success': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'warning': return <AlertTriangle className="w-4 h-4 text-yellow-600" />;
      case 'error': return <AlertTriangle className="w-4 h-4 text-red-600" />;
      default: return <Bell className="w-4 h-4 text-blue-600" />;
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setShowNotifications(!showNotifications)}
        className="relative p-2 text-gray-600 hover:text-gray-900 transition"
      >
        <Bell className="w-6 h-6" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
            {unreadCount}
          </span>
        )}
      </button>

      {showNotifications && (
        <div className="absolute right-0 mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
          <div className="p-4 border-b">
            <h3 className="font-semibold text-gray-900">Notifications</h3>
          </div>
          
          <div className="max-h-80 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="p-4 text-center text-gray-500">
                No notifications
              </div>
            ) : (
              notifications.map(notification => (
                <div
                  key={notification.id}
                  className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${
                    !notification.read ? 'bg-blue-50' : ''
                  }`}
                  onClick={() => markAsRead(notification.id)}
                >
                  <div className="flex items-start space-x-3">
                    {getNotificationIcon(notification.type)}
                    <div className="flex-1 min-w-0">
                      <h4 className="text-sm font-medium text-gray-900">
                        {notification.title}
                      </h4>
                      <p className="text-sm text-gray-600 mt-1">
                        {notification.message}
                      </p>
                      <p className="text-xs text-gray-400 mt-1">
                        {notification.timestamp.toLocaleTimeString()}
                      </p>
                    </div>
                    {!notification.read && (
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
          
          {notifications.length > 0 && (
            <div className="p-3 border-t">
              <button 
                onClick={() => setNotifications(prev => prev.map(n => ({ ...n, read: true })))}
                className="text-sm text-blue-600 hover:text-blue-700"
              >
                Mark all as read
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Enhanced Header Component
const Header = ({ title, subtitle, actions }) => (
  <div className="mb-8">
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold text-gray-900 mb-2">{title}</h1>
        {subtitle && <p className="text-gray-600">{subtitle}</p>}
      </div>
      
      <div className="flex items-center space-x-4">
        <NotificationCenter />
        {actions && <div className="flex space-x-2">{actions}</div>}
      </div>
    </div>
  </div>
);

// Enhanced Quick Actions Widget
const QuickActions = () => {
  const actions = [
    {
      icon: Bot,
      label: 'Create Agent',
      description: 'Build a new AI agent',
      color: 'bg-blue-500',
      href: '/agents/create'
    },
    {
      icon: Upload,
      label: 'Upload Knowledge',
      description: 'Add training documents',
      color: 'bg-green-500',
      href: '/knowledge/upload'
    },
    {
      icon: BarChart3,
      label: 'View Analytics',
      description: 'Check performance',
      color: 'bg-purple-500',
      href: '/analytics'
    },
    {
      icon: Settings,
      label: 'Settings',
      description: 'Configure your practice',
      color: 'bg-gray-500',
      href: '/settings'
    }
  ];

  return (
    <div className="bg-white rounded-xl shadow-sm border p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
      <div className="grid grid-cols-2 gap-4">
        {actions.map((action, index) => {
          const Icon = action.icon;
          return (
            <button
              key={index}
              className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-sm transition text-left"
            >
              <div className={`p-2 rounded-lg ${action.color}`}>
                <Icon className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="font-medium text-gray-900">{action.label}</h3>
                <p className="text-sm text-gray-600">{action.description}</p>
              </div>
            </button>
          );
        })}
      </div>
    </div>
  );
};

// Enhanced Activity Feed
const ActivityFeed = () => {
  const [activities, setActivities] = useState([]);

  useEffect(() => {
    // Mock data - replace with real API
    setActivities([
      {
        id: 1,
        type: 'agent_created',
        description: 'Created new billing agent "Insurance Helper"',
        user: 'Dr. Smith',
        timestamp: new Date(),
        icon: Bot,
        color: 'text-blue-600'
      },
      {
        id: 2,
        type: 'knowledge_uploaded',
        description: 'Uploaded "Insurance Policies.pdf" to knowledge base',
        user: 'Jane Doe',
        timestamp: new Date(Date.now() - 1800000),
        icon: Upload,
        color: 'text-green-600'
      },
      {
        id: 3,
        type: 'agent_interaction',
        description: 'Patient interacted with front desk agent',
        user: 'System',
        timestamp: new Date(Date.now() - 3600000),
        icon: MessageSquare,
        color: 'text-purple-600'
      },
      {
        id: 4,
        type: 'settings_updated',
        description: 'Updated practice settings',
        user: 'Dr. Smith',
        timestamp: new Date(Date.now() - 7200000),
        icon: Settings,
        color: 'text-orange-600'
      }
    ]);
  }, []);

  const getTimeAgo = (timestamp) => {
    const now = new Date();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    
    if (minutes < 60) {
      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
    } else {
      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h2>
      <div className="space-y-4">
        {activities.map(activity => {
          const Icon = activity.icon;
          return (
            <div key={activity.id} className="flex items-start space-x-3">
              <div className={`p-2 rounded-full bg-gray-100 ${activity.color}`}>
                <Icon className="w-4 h-4" />
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-900">{activity.description}</p>
                <div className="flex items-center space-x-2 mt-1">
                  <span className="text-xs text-gray-500">{activity.user}</span>
                  <span className="text-xs text-gray-400">•</span>
                  <span className="text-xs text-gray-500">{getTimeAgo(activity.timestamp)}</span>
                </div>
              </div>
            </div>
          );
        })}
      </div>
      <button className="w-full mt-4 text-sm text-blue-600 hover:text-blue-700 font-medium">
        View all activity
      </button>
    </div>
  );
};

// Enhanced Performance Metrics Widget
const PerformanceMetrics = () => {
  const metrics = [
    {
      label: 'Active Agents',
      value: '8',
      change: '+2',
      trend: 'up',
      icon: Bot
    },
    {
      label: 'Today\'s Interactions',
      value: '247',
      change: '+12%',
      trend: 'up',
      icon: MessageSquare
    },
    {
      label: 'Avg Response Time',
      value: '1.2s',
      change: '-0.3s',
      trend: 'down',
      icon: Clock
    },
    {
      label: 'User Satisfaction',
      value: '4.8',
      change: '+0.2',
      trend: 'up',
      icon: Star
    }
  ];

  return (
    <div className="bg-white rounded-xl shadow-sm border p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Performance Overview</h2>
      <div className="grid grid-cols-2 gap-4">
        {metrics.map((metric, index) => {
          const Icon = metric.icon;
          return (
            <div key={index} className="text-center">
              <div className="flex items-center justify-center mb-2">
                <Icon className="w-6 h-6 text-gray-400" />
              </div>
              <div className="text-2xl font-bold text-gray-900">{metric.value}</div>
              <div className="text-xs text-gray-600 mb-1">{metric.label}</div>
              <div className={`text-xs flex items-center justify-center ${
                metric.trend === 'up' ? 'text-green-600' : 'text-red-600'
              }`}>
                <TrendingUp className={`w-3 h-3 mr-1 ${
                  metric.trend === 'down' ? 'rotate-180' : ''
                }`} />
                {metric.change}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Enhanced Dashboard with widgets
const EnhancedDashboard = () => {
  const { user } = useAuth();
  const [greeting, setGreeting] = useState('');

  useEffect(() => {
    const hour = new Date().getHours();
    if (hour < 12) setGreeting('Good morning');
    else if (hour < 18) setGreeting('Good afternoon');
    else setGreeting('Good evening');
  }, []);

  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      <Header 
        title={`${greeting}, ${user?.full_name || 'User'}!`}
        subtitle={`Welcome back to ${user?.practice_name || 'your practice'}. Here's what's happening today.`}
      />

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Agents</p>
              <p className="text-3xl font-bold text-gray-900">12</p>
            </div>
            <Bot className="w-12 h-12 text-blue-600" />
          </div>
          <div className="mt-4 flex items-center">
            <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
            <span className="text-sm text-green-500">+2 this week</span>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Users</p>
              <p className="text-3xl font-bold text-gray-900">8</p>
            </div>
            <Users className="w-12 h-12 text-green-600" />
          </div>
          <div className="mt-4 flex items-center">
            <span className="text-sm text-gray-500">All users active</span>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">This Month</p>
              <p className="text-3xl font-bold text-gray-900">2,847</p>
            </div>
            <MessageSquare className="w-12 h-12 text-purple-600" />
          </div>
          <div className="mt-4 flex items-center">
            <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
            <span className="text-sm text-green-500">+18% from last month</span>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Satisfaction</p>
              <p className="text-3xl font-bold text-gray-900">98%</p>
            </div>
            <Shield className="w-12 h-12 text-orange-600" />
          </div>
          <div className="mt-4 flex items-center">
            <span className="text-sm text-green-500">Excellent rating</span>
          </div>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Left Column */}
        <div className="lg:col-span-2 space-y-8">
          <QuickActions />
          <PerformanceMetrics />
        </div>

        {/* Right Column */}
        <div className="space-y-8">
          <ActivityFeed />
          
          {/* System Status */}
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">System Status</h2>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">API Status</span>
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  <span className="text-sm text-green-600">Operational</span>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Database</span>
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  <span className="text-sm text-green-600">Healthy</span>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">LLM Service</span>
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
                  <span className="text-sm text-yellow-600">Minor Issues</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <PWAInstallPrompt />
    </div>
  );
};

// Export the enhanced dashboard
export default EnhancedDashboard;

// Additional utility components
export const LoadingSpinner = ({ size = 'default' }) => {
  const sizeClasses = {
    small: 'w-4 h-4',
    default: 'w-8 h-8',
    large: 'w-12 h-12'
  };

  return (
    <div className={`${sizeClasses[size]} animate-spin`}>
      <div className="h-full w-full border-4 border-gray-200 border-t-blue-600 rounded-full"></div>
    </div>
  );
};

export const ErrorBoundary = ({ children, fallback }) => {
  const [hasError, setHasError] = useState(false);

  useEffect(() => {
    const handleError = (error) => {
      console.error('Error caught by boundary:', error);
      setHasError(true);
    };

    window.addEventListener('error', handleError);
    return () => window.removeEventListener('error', handleError);
  }, []);

  if (hasError) {
    return fallback || (
      <div className="p-8 text-center">
        <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Something went wrong</h2>
        <p className="text-gray-600 mb-4">Please refresh the page or contact support if the problem persists.</p>
        <button 
          onClick={() => window.location.reload()}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Refresh Page
        </button>
      </div>
    );
  }

  return children;
};

// Initialize service worker
if (typeof window !== 'undefined') {
  registerServiceWorker();
}
