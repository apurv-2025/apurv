#!/bin/bash

# =============================================================================
# Integrated ClaimsAnamoly + Claims Service Startup Script
# =============================================================================

set -e

echo "üöÄ Starting Integrated ClaimsAnamoly + Claims Service System"
echo "=========================================================="

# Check if Docker and Docker Compose are installed
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker first."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Function to cleanup on exit
cleanup() {
    echo "üõë Stopping integrated system..."
    docker-compose -f docker-compose.integrated.yml down
    echo "‚úÖ Cleanup completed"
}

# Set trap to cleanup on script exit
trap cleanup EXIT

# Check if integrated docker-compose file exists
if [ ! -f "docker-compose.integrated.yml" ]; then
    echo "‚ùå docker-compose.integrated.yml not found!"
    exit 1
fi

echo "üìã System Components:"
echo "  ‚Ä¢ Claims Service (FHIR-compliant): http://localhost:8001"
echo "  ‚Ä¢ Claims Service Frontend: http://localhost:3000"
echo "  ‚Ä¢ ClaimsAnamoly API (ML): http://localhost:8000"
echo "  ‚Ä¢ ClaimsAnamoly Frontend: http://localhost:3001"
echo "  ‚Ä¢ PostgreSQL Database: localhost:5432"
echo ""

echo "üîß Starting services..."
docker-compose -f docker-compose.integrated.yml up --build -d

echo "‚è≥ Waiting for services to be ready..."
sleep 30

# Check service health
echo "üè• Checking service health..."

# Check Claims Service
echo "  ‚Ä¢ Checking Claims Service..."
if curl -f http://localhost:8001/health > /dev/null 2>&1; then
    echo "    ‚úÖ Claims Service is healthy"
else
    echo "    ‚ö†Ô∏è  Claims Service health check failed"
fi

# Check ClaimsAnamoly API
echo "  ‚Ä¢ Checking ClaimsAnamoly API..."
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "    ‚úÖ ClaimsAnamoly API is healthy"
else
    echo "    ‚ö†Ô∏è  ClaimsAnamoly API health check failed"
fi

# Check integration health
echo "  ‚Ä¢ Checking integration health..."
if curl -f http://localhost:8000/api/v1/health/integration > /dev/null 2>&1; then
    echo "    ‚úÖ Integration is healthy"
else
    echo "    ‚ö†Ô∏è  Integration health check failed"
fi

echo ""
echo "üéâ Integrated system is running!"
echo ""
echo "üìä Access Points:"
echo "  ‚Ä¢ Claims Service API: http://localhost:8001"
echo "  ‚Ä¢ Claims Service Docs: http://localhost:8001/docs"
echo "  ‚Ä¢ Claims Service Frontend: http://localhost:3000"
echo "  ‚Ä¢ ClaimsAnamoly API: http://localhost:8000"
echo "  ‚Ä¢ ClaimsAnamoly Docs: http://localhost:8000/docs"
echo "  ‚Ä¢ ClaimsAnamoly Frontend: http://localhost:3001"
echo ""
echo "üîç Test Integration:"
echo "  ‚Ä¢ Test ClaimsAnamoly scoring: curl -X POST http://localhost:8000/api/v1/score"
echo "  ‚Ä¢ Get claims from service: curl http://localhost:8000/api/v1/claims/from-service"
echo "  ‚Ä¢ Score claims from service: curl -X POST http://localhost:8000/api/v1/score/from-service"
echo ""
echo "üìù Logs:"
echo "  ‚Ä¢ View all logs: docker-compose -f docker-compose.integrated.yml logs -f"
echo "  ‚Ä¢ Claims Service logs: docker-compose -f docker-compose.integrated.yml logs -f claims-service"
echo "  ‚Ä¢ ClaimsAnamoly logs: docker-compose -f docker-compose.integrated.yml logs -f claims-anomaly-api"
echo ""
echo "Press Ctrl+C to stop the system"

# Keep the script running
wait 