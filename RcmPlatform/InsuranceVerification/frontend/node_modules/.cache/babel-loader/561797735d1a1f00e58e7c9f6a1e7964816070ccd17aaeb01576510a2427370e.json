{"ast":null,"code":"var _s = $RefreshSig$();\n// File: src/hooks/useEligibilityCheck.js\nimport { useState, useCallback } from 'react';\nimport { apiService } from '../services/apiService';\nimport { useToast } from '../contexts/ToastContext';\nimport { useApp } from '../contexts/AppContext';\nexport const useEligibilityCheck = () => {\n  _s();\n  const [submitting, setSubmitting] = useState(false);\n  const {\n    showSuccess,\n    showError\n  } = useToast();\n  const {\n    dispatch\n  } = useApp();\n  const submitEligibilityInquiry = useCallback(async requestData => {\n    try {\n      setSubmitting(true);\n      const result = await apiService.submitEligibilityInquiry(requestData);\n      const newRequest = {\n        id: result.request_id,\n        status: 'submitted',\n        timestamp: new Date().toISOString(),\n        member_id: requestData.member_id,\n        provider_npi: requestData.provider_npi\n      };\n      dispatch({\n        type: 'ADD_REQUEST',\n        payload: newRequest\n      });\n      showSuccess('Eligibility inquiry submitted successfully!');\n\n      // Check for response after delay\n      setTimeout(() => checkResponse(result.request_id), 2000);\n      return result;\n    } catch (error) {\n      showError(error.message || 'Failed to submit eligibility inquiry');\n      throw error;\n    } finally {\n      setSubmitting(false);\n    }\n  }, [dispatch, showSuccess, showError]);\n  const checkResponse = useCallback(async requestId => {\n    try {\n      const result = await apiService.getEligibilityResponse(requestId);\n      dispatch({\n        type: 'SET_ELIGIBILITY_RESULT',\n        payload: result\n      });\n      dispatch({\n        type: 'UPDATE_REQUEST',\n        payload: {\n          id: requestId,\n          status: 'completed',\n          result\n        }\n      });\n      showSuccess('Eligibility response received!');\n      return result;\n    } catch (error) {\n      console.error('Error checking eligibility response:', error);\n    }\n  }, [dispatch, showSuccess]);\n  return {\n    submitEligibilityInquiry,\n    checkResponse,\n    submitting\n  };\n};\n_s(useEligibilityCheck, \"UgxVGPy4zCY+pNgSER5oyPng4GA=\", false, function () {\n  return [useToast, useApp];\n});","map":{"version":3,"names":["useState","useCallback","apiService","useToast","useApp","useEligibilityCheck","_s","submitting","setSubmitting","showSuccess","showError","dispatch","submitEligibilityInquiry","requestData","result","newRequest","id","request_id","status","timestamp","Date","toISOString","member_id","provider_npi","type","payload","setTimeout","checkResponse","error","message","requestId","getEligibilityResponse","console"],"sources":["/Users/paramhegde/apurv/agenticpractice/InsuranceVerification/frontend/src/hooks/useEligibilityCheck.js"],"sourcesContent":["// File: src/hooks/useEligibilityCheck.js\nimport { useState, useCallback } from 'react';\nimport { apiService } from '../services/apiService';\nimport { useToast } from '../contexts/ToastContext';\nimport { useApp } from '../contexts/AppContext';\n\nexport const useEligibilityCheck = () => {\n  const [submitting, setSubmitting] = useState(false);\n  const { showSuccess, showError } = useToast();\n  const { dispatch } = useApp();\n\n  const submitEligibilityInquiry = useCallback(async (requestData) => {\n    try {\n      setSubmitting(true);\n      \n      const result = await apiService.submitEligibilityInquiry(requestData);\n      \n      const newRequest = {\n        id: result.request_id,\n        status: 'submitted',\n        timestamp: new Date().toISOString(),\n        member_id: requestData.member_id,\n        provider_npi: requestData.provider_npi\n      };\n      \n      dispatch({ type: 'ADD_REQUEST', payload: newRequest });\n      \n      showSuccess('Eligibility inquiry submitted successfully!');\n      \n      // Check for response after delay\n      setTimeout(() => checkResponse(result.request_id), 2000);\n      \n      return result;\n    } catch (error) {\n      showError(error.message || 'Failed to submit eligibility inquiry');\n      throw error;\n    } finally {\n      setSubmitting(false);\n    }\n  }, [dispatch, showSuccess, showError]);\n\n  const checkResponse = useCallback(async (requestId) => {\n    try {\n      const result = await apiService.getEligibilityResponse(requestId);\n      \n      dispatch({ type: 'SET_ELIGIBILITY_RESULT', payload: result });\n      dispatch({ \n        type: 'UPDATE_REQUEST', \n        payload: { id: requestId, status: 'completed', result } \n      });\n      \n      showSuccess('Eligibility response received!');\n      \n      return result;\n    } catch (error) {\n      console.error('Error checking eligibility response:', error);\n    }\n  }, [dispatch, showSuccess]);\n\n  return {\n    submitEligibilityInquiry,\n    checkResponse,\n    submitting\n  };\n};\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,MAAM,QAAQ,wBAAwB;AAE/C,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM;IAAES,WAAW;IAAEC;EAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAC7C,MAAM;IAAEQ;EAAS,CAAC,GAAGP,MAAM,CAAC,CAAC;EAE7B,MAAMQ,wBAAwB,GAAGX,WAAW,CAAC,MAAOY,WAAW,IAAK;IAClE,IAAI;MACFL,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAMM,MAAM,GAAG,MAAMZ,UAAU,CAACU,wBAAwB,CAACC,WAAW,CAAC;MAErE,MAAME,UAAU,GAAG;QACjBC,EAAE,EAAEF,MAAM,CAACG,UAAU;QACrBC,MAAM,EAAE,WAAW;QACnBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,SAAS,EAAET,WAAW,CAACS,SAAS;QAChCC,YAAY,EAAEV,WAAW,CAACU;MAC5B,CAAC;MAEDZ,QAAQ,CAAC;QAAEa,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEV;MAAW,CAAC,CAAC;MAEtDN,WAAW,CAAC,6CAA6C,CAAC;;MAE1D;MACAiB,UAAU,CAAC,MAAMC,aAAa,CAACb,MAAM,CAACG,UAAU,CAAC,EAAE,IAAI,CAAC;MAExD,OAAOH,MAAM;IACf,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdlB,SAAS,CAACkB,KAAK,CAACC,OAAO,IAAI,sCAAsC,CAAC;MAClE,MAAMD,KAAK;IACb,CAAC,SAAS;MACRpB,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACG,QAAQ,EAAEF,WAAW,EAAEC,SAAS,CAAC,CAAC;EAEtC,MAAMiB,aAAa,GAAG1B,WAAW,CAAC,MAAO6B,SAAS,IAAK;IACrD,IAAI;MACF,MAAMhB,MAAM,GAAG,MAAMZ,UAAU,CAAC6B,sBAAsB,CAACD,SAAS,CAAC;MAEjEnB,QAAQ,CAAC;QAAEa,IAAI,EAAE,wBAAwB;QAAEC,OAAO,EAAEX;MAAO,CAAC,CAAC;MAC7DH,QAAQ,CAAC;QACPa,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE;UAAET,EAAE,EAAEc,SAAS;UAAEZ,MAAM,EAAE,WAAW;UAAEJ;QAAO;MACxD,CAAC,CAAC;MAEFL,WAAW,CAAC,gCAAgC,CAAC;MAE7C,OAAOK,MAAM;IACf,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC,EAAE,CAACjB,QAAQ,EAAEF,WAAW,CAAC,CAAC;EAE3B,OAAO;IACLG,wBAAwB;IACxBe,aAAa;IACbpB;EACF,CAAC;AACH,CAAC;AAACD,EAAA,CA1DWD,mBAAmB;EAAA,QAEKF,QAAQ,EACtBC,MAAM;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}