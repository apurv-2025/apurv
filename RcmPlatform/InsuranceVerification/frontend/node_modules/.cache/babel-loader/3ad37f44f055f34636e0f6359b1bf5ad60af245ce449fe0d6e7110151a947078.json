{"ast":null,"code":"// File: src/services/fileService.js\nclass FileService {\n  validateFile(file) {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/tiff', 'application/pdf'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('Invalid file type. Please upload an image (JPEG, PNG, TIFF) or PDF file.');\n    }\n    if (file.size > maxSize) {\n      throw new Error('File size too large. Please upload a file smaller than 10MB.');\n    }\n    return true;\n  }\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n  getFileExtension(filename) {\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n  }\n  createFilePreview(file) {\n    return new Promise((resolve, reject) => {\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      } else {\n        resolve(null); // No preview for non-image files\n      }\n    });\n  }\n}\nexport const fileService = new FileService();","map":{"version":3,"names":["FileService","validateFile","file","allowedTypes","maxSize","includes","type","Error","size","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","getFileExtension","filename","slice","lastIndexOf","createFilePreview","Promise","resolve","reject","startsWith","reader","FileReader","onload","e","target","result","onerror","readAsDataURL","fileService"],"sources":["/Users/paramhegde/apurv/agenticpractice/InsuranceVerification/frontend/src/services/fileService.js"],"sourcesContent":["// File: src/services/fileService.js\nclass FileService {\n  validateFile(file) {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/tiff', 'application/pdf'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('Invalid file type. Please upload an image (JPEG, PNG, TIFF) or PDF file.');\n    }\n\n    if (file.size > maxSize) {\n      throw new Error('File size too large. Please upload a file smaller than 10MB.');\n    }\n\n    return true;\n  }\n\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  getFileExtension(filename) {\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n  }\n\n  createFilePreview(file) {\n    return new Promise((resolve, reject) => {\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (e) => resolve(e.target.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      } else {\n        resolve(null); // No preview for non-image files\n      }\n    });\n  }\n}\n\nexport const fileService = new FileService();\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,CAAC;EAChBC,YAAYA,CAACC,IAAI,EAAE;IACjB,MAAMC,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,CAAC;IACjF,MAAMC,OAAO,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;IAElC,IAAI,CAACD,YAAY,CAACE,QAAQ,CAACH,IAAI,CAACI,IAAI,CAAC,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,0EAA0E,CAAC;IAC7F;IAEA,IAAIL,IAAI,CAACM,IAAI,GAAGJ,OAAO,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,8DAA8D,CAAC;IACjF;IAEA,OAAO,IAAI;EACb;EAEAE,cAAcA,CAACC,KAAK,EAAE;IACpB,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IAEjC,MAAMC,CAAC,GAAG,IAAI;IACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;IAEnD,OAAOM,UAAU,CAAC,CAACP,KAAK,GAAGI,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEM,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,KAAK,CAACC,CAAC,CAAC;EACzE;EAEAO,gBAAgBA,CAACC,QAAQ,EAAE;IACzB,OAAOA,QAAQ,CAACC,KAAK,CAAC,CAACD,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EAClE;EAEAC,iBAAiBA,CAACtB,IAAI,EAAE;IACtB,OAAO,IAAIuB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAIzB,IAAI,CAACI,IAAI,CAACsB,UAAU,CAAC,QAAQ,CAAC,EAAE;QAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAKN,OAAO,CAACM,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC;QAC/CL,MAAM,CAACM,OAAO,GAAGR,MAAM;QACvBE,MAAM,CAACO,aAAa,CAAClC,IAAI,CAAC;MAC5B,CAAC,MAAM;QACLwB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB;IACF,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMW,WAAW,GAAG,IAAIrC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}