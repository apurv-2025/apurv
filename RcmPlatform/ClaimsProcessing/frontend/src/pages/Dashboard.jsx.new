import React, { useState, useEffect } from 'react';
import { 
  Users, 
  FileText, 
  Clock, 
  CheckCircle, 
  XCircle, 
  AlertCircle,
  TrendingUp,
  Calendar,
  Activity
} from 'lucide-react';
import Card from '../components/common/Card';
import Button from '../components/common/Button';
import { useAuthorization } from '../contexts/AuthorizationContext';

const Dashboard = () => {
  const { statistics, requests, fetchRequests } = useAuthorization();
  const [loading, setLoading] = useState(true);
  const [timeframe, setTimeframe] = useState('today');

  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        await fetchRequests();
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadDashboardData();
  }, [fetchRequests]);

  const statsCards = [
    {
      title: 'Total Requests',
      value: statistics.total,
      icon: FileText,
      color: 'blue',
      change: '+12%',
      changeType: 'increase'
    },
    {
      title: 'Pending',
      value: statistics.pending,
      icon: Clock,
      color: 'yellow',
      change: '+5%',
      changeType: 'increase'
    },
    {
      title: 'Approved',
      value: statistics.approved,
      icon: CheckCircle,
      color: 'green',
      change: '+18%',
      changeType: 'increase'
    },
    {
      title: 'Denied',
      value: statistics.denied,
      icon: XCircle,
      color: 'red',
      change: '-3%',
      changeType: 'decrease'
    }
  ];

  const recentRequests = requests.slice(0, 5);

  const getStatusColor = (status) => {
    switch (status) {
      case 'approved':
        return 'text-green-600 bg-green-100';
      case 'denied':
        return 'text-red-600 bg-red-100';
      case 'pending':
        return 'text-yellow-600 bg-yellow-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent':
        return 'text-red-600 bg-red-100';
      case 'high':
        return 'text-orange-600 bg-orange-100';
      case 'normal':
        return 'text-blue-600 bg-blue-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-300 rounded w-1/4 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[1, 2, 3, 4].map(i => (
              <div key={i} className="h-32 bg-gray-300 rounded-lg"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="h-64 bg-gray-300 rounded-lg"></div>
            <div className="h-64 bg-gray-300 rounded-lg"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600">Overview of prior authorization activities</p>
        </div>
        <div className="flex items-center space-x-3">
          <select
            value={timeframe}
            onChange={(e) => setTimeframe(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="today">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
            <option value="quarter">This Quarter</option>
          </select>
          <Button
            variant="primary"
            icon={<Activity className="w-4 h-4" />}
            onClick={() => fetchRequests()}
          >
            Refresh
          </Button>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsCards.map((stat, index) => {
          const IconComponent = stat.icon;
          return (
            <Card key={index} className="hover:shadow-lg transition-shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                  <p className="text-3xl font-bold text-gray-900 mt-2">{stat.value}</p>
                  <div className="flex items-center mt-2">
                    <TrendingUp className={`w-4 h-4 ${
                      stat.changeType === 'increase' ? 'text-green-500' : 'text-red-500'
                    }`} />
                    <span className={`text-sm ml-1 ${
                      stat.changeType === 'increase' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {stat.change}
                    </span>
                    <span className="text-sm text-gray-500 ml-1">vs last period</span>
                  </div>
                </div>
                <div className={`p-3 rounded-lg bg-${stat.color}-100`}>
                  <IconComponent className={`w-6 h-6 text-${stat.color}-600`} />
                </div>
              </div>
            </Card>
          );
        })}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Requests */}
        <Card 
          title="Recent Requests" 
          subtitle="Latest prior authorization submissions"
          headerActions={
            <Button variant="outline" size="sm">
              View All
            </Button>
          }
        >
          <div className="space-y-4">
            {recentRequests.length > 0 ? (
              recentRequests.map((request) => (
                <div key={request.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                  <div className="flex items-center space-x-3">
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <FileText className="w-4 h-4 text-blue-600" />
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900">{request.id}</h4>
                      <p className="text-sm text-gray-600">{request.patientName}</p>
                      <div className="flex items-center space-x-2 mt-1">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}>
                          {request.status}
                        </span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(request.priority)}`}>
                          {request.priority}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-500">{request.submittedDate}</p>
                    <p className="text-xs text-gray-400">Last updated: {request.lastUpdate}</p>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8">
                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No recent requests</h3>
                <p className="text-gray-600">Submit your first prior authorization request to get started.</p>
              </div>
            )}
          </div>
        </Card>

        {/* Quick Actions */}
        <Card 
          title="Quick Actions" 
          subtitle="Common tasks and shortcuts"
        >
          <div className="grid grid-cols-2 gap-4">
            <Button
              variant="outline"
              className="h-20 flex-col"
              icon={<FileText className="w-6 h-6 mb-2" />}
            >
              New Request
            </Button>
            <Button
              variant="outline"
              className="h-20 flex-col"
              icon={<Users className="w-6 h-6 mb-2" />}
            >
              Patient Lookup
            </Button>
            <Button
              variant="outline"
              className="h-20 flex-col"
              icon={<Activity className="w-6 h-6 mb-2" />}
            >
              Status Inquiry
            </Button>
            <Button
              variant="outline"
              className="h-20 flex-col"
              icon={<Calendar className="w-6 h-6 mb-2" />}
            >
              Reports
            </Button>
          </div>
        </Card>
      </div>

      {/* Alerts and Notifications */}
      <Card title="Alerts & Notifications">
        <div className="space-y-3">
          <div className="flex items-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <AlertCircle className="w-5 h-5 text-yellow-600 mr-3" />
            <div>
              <h4 className="font-medium text-yellow-800">Pending Review</h4>
              <p className="text-sm text-yellow-700">3 authorization requests require urgent review</p>
            </div>
          </div>
          
          <div className="flex items-center p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <Clock className="w-5 h-5 text-blue-600 mr-3" />
            <div>
              <h4 className="font-medium text-blue-800">System Maintenance</h4>
              <p className="text-sm text-blue-700">Scheduled maintenance window: Tonight 11 PM - 1 AM EST</p>
            </div>
          </div>
          
          <div className="flex items-center p-3 bg-green-50 border border-green-200 rounded-lg">
            <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
            <div>
              <h4 className="font-medium text-green-800">System Status</h4>
              <p className="text-sm text-green-700">All systems operational - 99.9% uptime this month</p>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default Dashboard;
