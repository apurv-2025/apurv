version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    environment:
      POSTGRES_DB: agentic_core
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentic_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_core"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network

  # Agentic Core Backend
  agentic-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic-backend
    environment:
      # Database
      DATABASE_URL: postgresql://agentic_user:${POSTGRES_PASSWORD:-agentic_password}@postgres:5432/agentic_core
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # AI Model Configuration
      AI_MODEL_PROVIDER: ${AI_MODEL_PROVIDER:-openai}
      AI_MODEL_NAME: ${AI_MODEL_NAME:-gpt-4}
      AI_API_KEY: ${AI_API_KEY}
      
      # Application Configuration
      APP_NAME: Agentic Core
      APP_VERSION: 1.0.0
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-3600}
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network
    restart: unless-stopped

  # Agentic Core Frontend (Development)
  agentic-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: agentic-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_ENVIRONMENT: ${NODE_ENV:-development}
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    ports:
      - "3000:3000"
    depends_on:
      - agentic-backend
    networks:
      - agentic-network
    profiles:
      - dev

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - agentic-backend
    networks:
      - agentic-network
    profiles:
      - prod

  # Celery Worker (Background Tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic-celery-worker
    command: celery -A agentic_core.worker worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://agentic_user:${POSTGRES_PASSWORD:-agentic_password}@postgres:5432/agentic_core
      REDIS_URL: redis://redis:6379
      AI_API_KEY: ${AI_API_KEY}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    profiles:
      - prod

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic-celery-beat
    command: celery -A agentic_core.worker beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://agentic_user:${POSTGRES_PASSWORD:-agentic_password}@postgres:5432/agentic_core
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    profiles:
      - prod

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agentic-network
    profiles:
      - monitoring

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - agentic-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agentic-network:
    driver: bridge 